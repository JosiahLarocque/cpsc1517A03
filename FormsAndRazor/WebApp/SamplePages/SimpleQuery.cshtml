@{
    Layout = "~/_Layout.cshtml";
    Page.Title = string.Format("Razor - {0}", "Simple Query");
    //output variables
    //needed on the form
    string regionid = "";
    string regiondescription = "";

    var regionarg = Request.Form["RegionArg"];
    var thebutton = Request.Form["theButton"];
    int inputarg = 0;
    //first time the page is used, NO form has yet to be created; therefore the input variables will be null.
    if (string.IsNullOrEmpty(regionarg) || !int.TryParse(regionarg, out inputarg))
    {
        regionarg = "0";
    }


    //open a connection to the database
    // use the connection string name attribute value
    var db = Database.Open("NWDB");

    //create a sql query to be executed
    //the input argument value will be represented by a placeholder
    //   in the command.
    //Placeholders are indexed (start at 0)
    //Your query can be coded on several physical lines
    var sqlcommand = "SELECT RegionID, RegionDescription "
                    + "FROM Region "
                    + "WHERE RegionID = @0";

    //execute the query
    //there are 3 ways to execute your query command DEPENDING on the expected result
    //a) a single row returned  .QuerySingle()
    //b) 0, 1 or more rows returned  .Query()
    //c) a single value (not a row) returned . QueryValue()

    //we expect a single row
    //Why? Lookup is by primary key
    //syntax is  .xxxx(commandstring [,list of argument values])
    //the order of the values in the list of arguments values MUST match the order
    //   expected by the placeholders
    var results = db.QuerySingle(sqlcommand, regionarg);
}

@section banner {
    <h1>Database PKey Query</h1>
}

@if (IsPost)
{
    if (thebutton.Equals("reset"))
    {
        regionid = "";
        regiondescription = "";

    }
    else
    {
        if (results == null)
        {
            <p>There is no region with the id of @regionarg</p>
            regionid = "";
            regiondescription = "";
        }
        else
        {
            //you can access the data from your results either by:
            //a) index synta of xxx[index]
            //b) by property syntax of xxx.PropertyName

            //the datatype of the result item is the return datatype of the property
            //the form likes to output strings
            <p>Found</p>
            regionid = results[0].ToString();
            regiondescription = results.RegionDescription;
        }
    }
}
else
{
    regionarg = ""; //show the placeholder prompt
}


<form id="theform" method="post">
    <div class="row">
        <div class="col-6">
            <div class="offset-1">
                <label id="lblRegionArg">Enter Region ID:</label>&nbsp;&nbsp;
                <input type="text" id="RegionArg" name="RegionArg" value="@regionarg" placeholder="region id" textmode="number"/>
                <br /><br />
                <button type="submit" id="theButton" name="theButton" value="submit" class="btn btn-primary">Fetch</button>&nbsp;&nbsp;
                <button type="submit" id="theButton" name="theButton" value="Reset" class="btn btn-light">Reset</button>
            </div>
        </div>
        <div class="col-6">
            <div class="offset-1">
                <label id="lblRegionID">Region ID:</label>&nbsp;&nbsp;
                <label id="RegionID">@regionid</label>
                <br /><br />
                <label id="lblRegionDescription">Region Name:</label>&nbsp;&nbsp;
                <input type="text" id="RegionDescription" name="RegionDescriptions" value="@regiondescription" readonly/>
            </div>
        </div>
    </div>
</form>